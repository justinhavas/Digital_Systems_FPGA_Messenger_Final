-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- addi $r16, $r0, 0
0000 : 00101100000000000000000000000000;
    -- addi $r17, $r0, 1
0001 : 00101100010000000000000000000001;
    -- addi $r20, $r0, 63 # x-limit
0002 : 00101101000000000000000000111111;
    -- addi $r21, $r0, 47 # y-limit
0003 : 00101101010000000000000000101111;
    -- addi $r15, $r0, 0
0004 : 00101011110000000000000000000000;
    -- bne $r15, $r0, 2 #r15 is ready register
0005 : 00010011110000000000000000000010;
    -- chReady #READ in Ascii and put in reg15 NEW INSTRUCTION, needs to write into register from line
0006 : 01001000000000000000000000000000;
    -- j 5 # change to bne expression
0007 : 00001000000000000000000000000101;
    -- chEnter #write value into reg14 NEW INSTRUCTION, needs to write into register from a line
0008 : 01010000000000000000000000000000;
<<<<<<< HEAD
    -- bne $r14, $r0, 6 # do different command if an enter signal
0009 : 00010011100000000000000000000110;
    -- addi $r16, $r16, 1 # x-coordinate
0010 : 00101100001000000000000000000001;
    -- blt $r20, $r16, 4 # check if x-coordinate off screen
0011 : 00110101001000000000000000000100;
=======
    -- bne $r14, $r0, 36 # do different command if an enter signal
0009 : 00010011100000000000000000100100;
    -- addi $r16, $r16, 1 # x-coordinate
0010 : 00101100001000000000000000000001;
    -- blt $r20, $r16, 5 # check if x-coordinate off screen
0011 : 00110101001000000000000000000101;
>>>>>>> master
    -- outCor $r16, $r17 # output x and y-coordinate NEW INSTRUCTION reading from reg and outputs in execute
0012 : 01011100001000100000000000000000;
    -- jal 23
0013 : 00011000000000000000000000010111;
    -- resReady # NEW INSTRUCTION opcode and all zeroes, check opcode in execute
0014 : 01100000000000000000000000000000;
    -- addi $r15, $r0, 0
0015 : 00101011110000000000000000000000;
    -- j 5
0016 : 00001000000000000000000000000101;
    -- addi $r16, $r0, 1
0017 : 00101100000000000000000000000001;
    -- addi $r17, $r17, 1 # y-coordinate add to y
0018 : 00101100011000100000000000000001;
    -- blt $r21, $r17, 1
0019 : 00110101011000100000000000000001;
    -- j 12 # go output new values
0020 : 00001000000000000000000000001100;
    -- addi $r17, $r0, 1 # this is at weird edge not sure what to do yet
0021 : 00101100010000000000000000000001;
    -- j 12 ###  to new code
0022 : 00001000000000000000000000001100;
    -- asciiReg #custom load ascii into reg 25
0023 : 01101000000000000000000000000000;
    -- addi $r28, $r0, 1 # for calculating if at first byte of address
0024 : 00101111000000000000000000000001;
    -- sub $r28, $r28, $r22
0025 : 00000111001110010110000000000100;
    -- blt $r0, $r28, 10 # if not at first term in block, don't lw
0026 : 00110000001110000000000000001010;
    -- lw $r24, 0($r23) # load characters stored at the address
0027 : 01000110001011100000000000000000;
    -- addi $r28, $r0, 2 
0028 : 00101111000000000000000000000010;
    -- blt $r28, $r22, 11 # if at end of word
0029 : 00110111001011000000000000001011;
    -- addi $r28, $r0, 1
0030 : 00101111000000000000000000000001;
    -- blt $r28, $r22, 7
0031 : 00110111001011000000000000000111;
    -- sll $r25, $r25, 16 # shift if at position 1
0032 : 00000110011100100000100000010000;
    -- or $r24, $r24, $r25 
0033 : 00000110001100011001000000001100;
    -- sw $r24, 0($r23) # sw instructin with new ascii
0034 : 00111110001011100000000000000000;
    -- addi $r22, $r22, 1 # this is counter
0035 : 00101101101011000000000000000001;
    -- jr $r31 
0036 : 00100111110000000000000000000000;
    -- sll $r24, $r25, 24 # shift for position 0
0037 : 00000110001100100000110000010000;
    -- j 34
0038 : 00001000000000000000000000100010;
    -- sll $r25, $r25, 8 # shift for position 2
0039 : 00000110011100100000010000010000;
    -- j 33 
0040 : 00001000000000000000000000100001;
    -- or $r24, $r24, $r25 
0041 : 00000110001100011001000000001100;
    -- sw $r24, 0($r23) 
0042 : 00111110001011100000000000000000;
    -- addi $r22, $r0, 0
0043 : 00101101100000000000000000000000;
    -- addi $r23, $r23, 1 # this will hold the reg address
0044 : 00101101111011100000000000000001;
    -- jr $r31
0045 : 00100111110000000000000000000000;
    -- addi $r16, $r0, 0
0046 : 00101100000000000000000000000000;
    -- addi $r17, $r17, 1 # y-coordinate add to y
0047 : 00101100011000100000000000000001;
    -- blt $r21, $r17, 1
0048 : 00110101011000100000000000000001;
    -- j 13 # go store enter
0049 : 00001000000000000000000000001101;
    -- addi $r17, $r0, 1 # this is at weird edge not sure what to do yet
0050 : 00101100010000000000000000000001;
    -- j 13
0051 : 00001000000000000000000000001101;
[0052 .. 4095] : 00000000000000000000000000000000;
END;
